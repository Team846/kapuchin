import edu.wpi.first.gradlerio.GradleRIOPlugin

plugins {
    id 'org.jetbrains.kotlin.jvm'
    id 'edu.wpi.first.GradleRIO' version "$gradlerio_version"
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlin_version"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$coroutines_version"

    implementation project(path: ':architecture', configuration: 'jvmfrcDefault')

    implementation wpi.deps.wpilib()
    implementation wpi.deps.vendor.java()
    nativeZip wpi.deps.wpilibJni(wpi.platforms.roborio)
    nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)

    testImplementation "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_version"
    testImplementation "org.jetbrains.kotlin:kotlin-test:$kotlin_version"
}

deploy {
    targets {
        roboRIO('roborio') {
            team = 846
        }
    }

    artifacts {
        frcJavaArtifact(project.name) {
            targets << 'roborio'
            jvmArgs /*<< '-XX:+UseG1GC'*/ << '-XX:MaxGCPauseMillis=75' << '-Xmx100M'
//          jvmArgs << '-verbose:class'
//          jvmArgs << '-verbosegc'
//          debug = true
//          debugPort = 8348
        }
    }
}

jar {
    from { configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) } }
    manifest GradleRIOPlugin.javaManifest('com.lynbrookrobotics.kapuchin.FunkyRobotKt')
}

def buildInfoPath = "build/buildInfo/"

task generateBuildInfo {

    doLast {
        mkdir buildInfoPath
        def info = [
                'DateTime'        : new Date().format('MM/dd/yyyy HH:mm:ss'),
                'User'            : ['git', 'config', 'user.name'].execute().text.trim(),
                'GitHasUncommited': (['git', 'status', '--porcelain'].execute().text.trim().isBlank() ? 'No' : 'Yes'),
                'GitBranch'       : ['git', 'branch', '--show-current'].execute().text.trim(),
                'GitHash'         : ['git', 'rev-parse', 'HEAD'].execute().text.trim()
        ]
        info.each { key, value -> file("$buildInfoPath${key}.txt").text = value }
    }
}

processResources.finalizedBy generateBuildInfo

sourceSets.main.resources.srcDir buildInfoPath

